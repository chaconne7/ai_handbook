[
["techniques.html", "Chapter 7 Techniques 7.1 Overview 7.2 Supervised Learning 7.3 Unsupervised Learning 7.4 Reinforcement Learning", " Chapter 7 Techniques 7.1 Overview Machine learning can be broadly bucketed into three categories: Supervised Learning Unsupervised Learning Reinforcement Learning Supervised learning encompasses tasks that try to predict something, such as stock price, or whether a picture contains a dog or a cat. To train a supervised ML model, you must define both input features and outputs, so we call this labeled data. Unsupervised learning aims to identify structure in unlabeled data, meaning you provide only input features. Examples include clustering books by topic, identifying when a machine might be faulty due to odd behavior, etc. Reinforcement learning trains an agent to accomplish a complex goal by identifying the next best step to take. Examples include playing PacMan or chess. In each of these categories, an engineer must specify an objective function to maximize or minimize, and define how to incorporate feedback from a correct or incorrect decision back into a model to adjust its parameters. 7.2 Supervised Learning Within supervised learning, there are typically two tasks we’re interested in: Regression - predicting a continous value, such as housing price Classification Useful Resources Classification Versus Regression 7.2.1 Regression 7.2.1.1 Linear Regression 7.2.1.2 ARIMA Useful Resources Introduction to Forecasting with ARIMA in R Step By Step Graphic Guide to Forecasting Through ARIMA Modeling In R ARIMA Models - Manufacturing Case Study Example Time Series Seasonal ARIMA Model In Python 7.2.1.3 Prophet Useful Resources Prophet Quickstart 7.2.2 Classification 7.2.2.1 K-Nearest Neighbors (KNN) 7.2.2.2 Logistic Regression 7.2.2.3 Naive Bayes 7.2.2.4 Support Vector Machines (SVM) 7.2.2.5 Decision Trees Useful Resources Decision Trees - An Intuitive Introduction How to Visualize a Decision Tree from a Random Forest in Python using Scikit-Learn 7.2.2.6 Random Forests Useful Resources Machine Learning Crash Course: Part 5 - Decision Trees and Ensemble Models 7.2.3 Neural Networks 7.2.3.1 Convolutional Neural Networks (CNN) Useful Resources Intro to Convolutional Neural Networks Visualizing what ConvNets Learn 7.2.3.2 Recurrent Neural Networks (RNN) 7.2.3.3 Long Short Term Memory (LSTM) Useful Resources Understanding LSTM Networks 7.3 Unsupervised Learning 7.3.1 Clustering 7.3.1.1 K-Means K-means clustering is one of the most common ways to identify groups in your data. You start with unlabeled data (i.e. online customer sales data) and want to identify what clusters they can be bucketed into (i.e. customer archetypes). How does it work? You define an objective function to minimize, initialize the number and location of cluster centroids (randomly or through a heuristic), and keep repeating the following steps until some criteria is met (i.e. 1000 iterations or objective function is sufficiently small): Update the cluster assignments of each data point Each data point is assigned to the cluster centroid that is closest Update the cluster centroids Each cluster center is the average of the data points assigned to it Note that k-means clustering usually requires some manual investigation. The best way to start is to visualize your data and see if you can roughly identify groups. If you see three groups, then start by initializing three cluster centroids. If you can’t identify any groupings visually, then it’s a pretty good bet that whatever clustering the algorithm assigns isn’t going to be useful or interpretable. Useful Resources: K-Means Clustering: From A to Z (September 2018, Towards Data Science) 7.3.1.2 Gaussian Mixture Model 7.3.2 Neural Networks 7.3.2.1 Autoencoders Autoencoders are neural networks that try to learn a latent representation of some input, which is a fancy way of saying it figures out the important features that capture the essence of the input. The purpose of building an autoencoder is typically: Dimensionality reduction or encoding data Example: “Visualizing high-dimensional data is challenging. t-SNE is the most commonly used method but struggles with large number of dimensions (typically above 32). So autoencoders are used as a preprocessing step to reduce the dimensionality, and this compressed representation is used by t-SNE to visualize the data in 2D space.”1 Denoise data Example: You have a grainy image but the random pixel values that cause the “graininess” is not useful for classifying what the image is. You can adjust how you use the autoencoder by feeding it the grainy image and having it try to predict the clean image. Autoencoders are comprised of two parts - an encoder neural network and a decoder neural network - and the inputs and outputs are the same. When the input is fed through the encoder, it is forced into a smaller, “lossy” representation due to the smaller number of neurons at the end of the encoder network. This compressed representation is then fed through the decoder, which tries to reconstruct the input. During the training process, the autoencoder therefore learns to approximate an identity function, and is forced to extract the most relevant features of the input. For the more technical folks, the function of an autoencoder is similar to principal component analysis (PCA). Useful Resources: How Autoencoders Work - Understanding the Math and Implementation (Kaggle) Deep inside: Autoencoders (February 2018, Towards Data Science) Autoencoders - Deep Learning Bits #1 (February 2017, Hacker Noon) Applied Deep Learning - Part 3: Autoencoders (October 2017, Towards Data Science) 7.3.2.2 Generative Adversarial Networks 7.4 Reinforcement Learning https://towardsdatascience.com/applied-deep-learning-part-3-autoencoders-1c083af4d798↩ "]
]
